async getBalancingCircles(selectedDate: string) {
    this.emptyStateDate = !selectedDate;

    try {
        const response = await this._common.getBalancingCircles();
        this.balancingCircles = response;

        const groupData = this.processGroups(this.balancingCircles, selectedDate);
        this.groupBalancingCircle = groupData;

        console.log('Organized Data Structure:', this.groupBalancingCircle);

        this.resetDatasets();

        this.datasets = this.calculateDailyImbalances(groupData.groups, selectedDate);

        this.initializeChart();
    } catch (error) {
        console.error('Error fetching balancing circles:', error);
    }
}

// Separate method to process groups
private processGroups(balancingCircles: any[], selectedDate: string): { groups: Group[] } {
    const groupData: { groups: Group[] } = { groups: [] };
    let finalSelectedDate = selectedDate;

    for (let group of balancingCircles) {
        const groupObj: Group = {
            groupName: group.name,
            imbalances: [],
            members: [],
        };

        const memberPromises = group.members.map(member => this.processMember(member, finalSelectedDate));

        groupObj.members = await Promise.all(memberPromises);
        groupData.groups.push(groupObj);
    }

    return groupData;
}

// Separate method to process each member
private async processMember(member: any, finalSelectedDate: string): Promise<Member> {
    const memberObj: Member = {
        id: member.id,
        name: member.name,
        type: member.type,
        inflows: new Map<string, number>(),
        outflows: new Map<string, number>(),
    };

    const forecast = await this.getMemberForecast(member.id);

    // Update the final selected date if needed
    finalSelectedDate = this.updateFinalSelectedDate(finalSelectedDate, forecast);

    // Process forecast data
    this.processForecastData(forecast, memberObj);

    return memberObj;
}

// Method to update the final selected date
private updateFinalSelectedDate(selectedDate: string, forecast: any[]): string {
    if (!selectedDate && forecast.length > 0) {
        selectedDate = forecast[0].date.split('T')[0];
        this.date = selectedDate;
    } else {
        this.date = selectedDate;
    }
    return selectedDate;
}

// Method to process forecast data
private processForecastData(forecast: any[], memberObj: Member) {
    for (let forecastData of forecast) {
        const fullDate = forecastData.date;
        const value = memberObj.type === 'Producer' ? forecastData.value : -forecastData.value;

        if (memberObj.type === 'Producer') {
            memberObj.inflows.set(fullDate, value);
        } else if (memberObj.type === 'Consumer') {
            memberObj.outflows.set(fullDate, value);
        }
    }
}

// Method to reset datasets and hours
private resetDatasets() {
    this.datasets = [];
    this.hours = Array.from(
        { length: 24 },
        (_, hour) => `${String(hour).padStart(2, '0')}:00:00Z`
    );
}

// Method to calculate daily imbalances
private calculateDailyImbalances(groups: Group[], selectedDate: string) {
    const datasets = [];

    for (const group of groups) {
        const dailyImbalances = this.calculateGroupDailyImbalances(group, selectedDate);
        group.imbalances = dailyImbalances;

        if (dailyImbalances.length > 0) {
            const values = dailyImbalances[0].imbalance.map(item => item.value);
            const memberData = this.extractMemberData(group.members, selectedDate);

            datasets.push({
                data: values,
                label: group.groupName,
                fill: false,
                members: memberData,
            });
        }
    }

    return datasets;
}

// Method to extract member data
private extractMemberData(members: Member[], selectedDate: string) {
    return members.map(member => {
        const inflowsForDate = Array.from(member.inflows)
            .filter(([date]) => date.startsWith(selectedDate))
            .map(([date, value]) => ({ date, value }));
        const outflowsForDate = Array.from(member.outflows)
            .filter(([date]) => date.startsWith(selectedDate))
            .map(([date, value]) => ({ date, value }));

        return {
            id: member.id,
            name: member.name,
            inflows: inflowsForDate,
            outflows: outflowsForDate,
        };
    });
}

// Calculate group daily imbalances
private calculateGroupDailyImbalances(group: Group, finalSelectedDate: string) {
    const dailyImbalances: { date: string; imbalance: ImbalanceTime[] }[] = [];

    for (const member of group.members) {
        const transactions = member.type === 'Consumer' ? member.outflows : member.inflows;

        if (transactions.size === 0) {
            this.emptyState = true;
            continue;
        }

        const lastTransactionDate: string | undefined = Array.from(transactions.keys()).pop()?.split('T')[0];

        if (finalSelectedDate && finalSelectedDate > lastTransactionDate) {
            this.emptyState = true;
            return [];
        } else {
            this.emptyState = false;
        }

        this.updateDailyImbalances(transactions, finalSelectedDate, dailyImbalances);
    }

    return dailyImbalances;
}

// Method to update daily imbalances
private updateDailyImbalances(transactions: Map<string, number>, finalSelectedDate: string, dailyImbalances: { date: string; imbalance: ImbalanceTime[] }[]) {
    for (const [transactionTime, transactionValue] of transactions) {
        const transactionDate = transactionTime.split('T')[0];
        const hour = transactionTime.split('T')[1].split(':')[0];

        if (finalSelectedDate && transactionDate !== finalSelectedDate) continue;

        let dateEntry = dailyImbalances.find(entry => entry.date === transactionDate);

        if (!dateEntry) {
            dateEntry = {
                date: transactionDate,
                imbalance: Array.from({ length: 24 }, (_, hour) => ({
                    time: `${String(hour).padStart(2, '0')}:00:00Z`,
                    value: 0,
                })),
            };
            dailyImbalances.push(dateEntry);
        }

        // Update the imbalance value for the specific hour
        dateEntry.imbalance[parseInt(hour)].value += transactionValue;
    }
}
